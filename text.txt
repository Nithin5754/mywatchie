 const userDetailsEdit = async (req, res) => {

  const { pUsername, pEmail, pNumber,addressSetId} = req.body;

  const userEmail = req.session.userEmail;
  try {
    const isThisEmailExisting = await UserCollection.findOne({ email: pEmail });
    if (isThisEmailExisting && !pEmail) {
      return res.redirect('/userDetails/detailsEdit');
    }
    const verifyEmail = await UserCollection.findOne({ email: userEmail });

    const userDetailsId = verifyEmail._id;
    if (!verifyEmail) {
      return res.redirect('/userDetails/detailsEdit');
    }
// for setting primary address 
    const isAddressEXisting=await Address.findOne({_id:addressSetId})
    console.log((isAddressEXisting+"yes its their"));

    const existingUserUpdate = await UserCollection.findByIdAndUpdate(
      userDetailsId,
      {
        email: pEmail,
        username: pUsername,
        mobileNumber: pNumber,
        isPrimaryAddress:isAddressEXisting._id
       
      },
      { new: true },
    );

    if (!existingUserUpdate) {
      return res.status(500).send('error fetching:updating ');
    }

    req.session.userEmail=pEmail;
    req.session.profileName=pUsername;

    // adding new address to the existing users

 

    
    return res.redirect('/userDeatils');
  } catch (error) {
    console.error(
      'error in updating existing users and upating address' + error,
    );
    res
      .status(500)
      .send('error in updating existing users and upating address' + error);
  }
};



















 const userDetailsEdit = async (req, res) => {

  const { pUsername, pEmail, pNumber,addressSetId} = req.body;

  const userEmail = req.session.userEmail;
  try {
    const isThisEmailExisting = await UserCollection.findOne({ email: pEmail });
    if (isThisEmailExisting && !pEmail) {
      return res.redirect('/userDetails/detailsEdit');
    }
    const verifyEmail = await UserCollection.findOne({ email: userEmail });

    const userDetailsId = verifyEmail._id;
    if (!verifyEmail) {
      return res.redirect('/userDetails/detailsEdit');
    }
    // storing previous image to a session
 
     
// for setting primary address 
    const isAddressEXisting=await Address.findOne({_id:addressSetId})
//  req.session.isPreviousAddress=verifyEmail.isPrimaryAddress
    isPrimary=isAddressEXisting._id
  //  if(isPrimary===null){
  //    isPrimary=req.session.isPreviousAddress
  //  }
 
    const existingUserUpdate = await UserCollection.findByIdAndUpdate(
      userDetailsId,
      {
        email: pEmail,
        username: pUsername,
        mobileNumber: pNumber,
        isPrimaryAddress:isPrimary   
      },
      { new: true },
    );

    if (!existingUserUpdate) {
      return res.status(500).send('error fetching:updating ');
    }

    req.session.userEmail=pEmail;
    req.session.profileName=pUsername;

    // adding new address to the existing users

 

    
    return res.redirect('/userDeatils');
  } catch (error) {
    console.error(
      'error in updating existing users and upating address' + error,
    );
    res
      .status(500)
      .send('error in updating existing users and upating address' + error);
  }
};