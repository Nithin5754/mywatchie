const PDFDocument = require('pdfkit');

function buildPDF(dataCallback, endCallback, invoiceData) {
  const doc = new PDFDocument();
  doc.on('data', dataCallback);
  doc.on('end', endCallback);
  doc.fontSize(14).text('E-commerce Invoice', { align: 'center' });

  // Invoice details
  doc.fontSize(12).text('Invoice Details:');
  doc.text(`Invoice Number: ${invoiceData.invoiceNumber}`);
  doc.text(`Date: ${invoiceData.date}`);
  doc.text(`Due Date: ${invoiceData.dueDate}`);
  doc.moveDown();

  // Customer details
  doc.fontSize(12).text('Customer Details:');
  doc.text(`Customer Name: ${invoiceData.customerName}`);
  doc.text(`Billing Address: ${invoiceData.billingAddress}`);
  doc.text(`Shipping Address: ${invoiceData.shippingAddress}`);
  doc.moveDown();

  // Order items
  doc.fontSize(12).text('Order Items:');
 const tableData = {
  headers: ['Product', 'Quantity', 'Price', 'Total'],
  rows: orderConfirm.items.map(item => [
    item.product.productName, // Replace with the correct property for the product name
    item.quantity,
    `$${item.orderPrice.toFixed(2)}`,
    `$${(item.priceOfTotalQTy).toFixed(2)}`,
  ]),
};

doc.table(tableData);
  });
  doc.moveDown();

  // Summary
  doc.fontSize(12).text('Summary:');
  doc.text(`Subtotal: $${invoiceData.subtotal.toFixed(2)}`);
  doc.text(`Shipping Cost: $${invoiceData.shippingCost.toFixed(2)}`);
  doc.text(`Tax (5%): $${invoiceData.tax.toFixed(2)}`);
  doc.text(`Total Amount: $${invoiceData.totalAmount.toFixed(2)}`);

  doc.end();
}

module.exports = { buildPDF };
