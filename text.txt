
   <script>
     // Get all the buttons
      const addButton = document.querySelectorAll('.Add-cart');
      const minusButton = document.querySelectorAll('.minus-cart');
      const quantityDisplays = document.querySelectorAll('.quantity-display');
  

      addButton.forEach(button => {
        button.addEventListener('click', () => {
          const productId = button.getAttribute('data-Addid');
          const quantityDisplay = document.querySelector(`[data-product-id="${productId}"]`);
 
          let quantity = parseInt(quantityDisplay.textContent);
        


          // Update the quantity (add logic to limit the maximum quantity if needed)
       if(quantity<10){
           quantity++;
       }else{
        quantity;
       }
          quantityDisplay.textContent = quantity;
      
        });
      });

      minusButton.forEach(button => {
        button.addEventListener('click', () => {
          const productId = button.getAttribute('data-minusid');
          const quantityDisplay = document.querySelector(`[data-product-id="${productId}"]`);
          let quantity = parseInt(quantityDisplay.textContent);
    

          // Update the quantity (add logic to limit the minimum quantity if needed)
          if (quantity > 1) {
            quantity--;
            quantityDisplay.textContent = quantity;

          }
        });  
      });






    

   </script>














   //////////////////////////////////////


   productaddd and productb minus
   
//////////////////////////////////////////////////////////////


   const productMinus = async (req, res) => {
  try {
    const productId = req.params.productId;
    const userEmail = req.session.userEmail;

    const verifyUserEmail = await UserCollection.findOne({ email: userEmail });
    if (!verifyUserEmail) {
      return res.redirect('/homepage');
    }

    const userCart = await Cart.findOne({ userId: verifyUserEmail._id });
    if (!userCart) {
      return res.status(404).json({ message: 'Cart not found' });
    }

    const isProductInCart = userCart.items.find(
      item => item.product.toString() === productId
    );

    if (!isProductInCart) {
      return res.status(404).json({ message: 'Product not found in the cart' });
    }

    const qtyMinus = isProductInCart.quantity - 1;

    if (qtyMinus <= 0) {
      const itemTotalPrice = isProductInCart.single_product_total_price;
      userCart.total -= itemTotalPrice;
      const itemIndex = userCart.items.findIndex(
        item => item.product.toString() === productId
      );

      if (itemIndex !== -1) {
        userCart.items.splice(itemIndex, 1);
      }
    } else {
      const productPrice = await product.findOne({ _id: productId });
      const singleTotal = productPrice.product_price * qtyMinus;

      isProductInCart.quantity = qtyMinus;
      isProductInCart.single_product_total_price = singleTotal;
      userCart.total -= productPrice.product_price;
    }

    userCart.totalQuantity -= 1;
    await userCart.save();

    res.redirect('back');
  } catch (error) {
    console.error('Error decrementing product quantity:', error);
    return res.status(500).send(error);
  }
};

const productAdd = async (req, res) => {
  try {
    const productId = req.params.productId;
    const userEmail = req.session.userEmail;

    const verifyUserEmail = await UserCollection.findOne({ email: userEmail });
    if (!verifyUserEmail) {
      return res.redirect('/homepage');
    }

    const userCart = await Cart.findOne({ userId: verifyUserEmail._id });
    if (!userCart) {
      return res.status(404).json({ message: 'Cart not found' });
    }

    const isproductInCart = userCart.items.find(
      item => item.product.toString() === productId
    );

    if (!isproductInCart) {
      return res.status(404).json({ message: 'Product not found in the cart' });
    }

    let qtyAdd = isproductInCart.quantity + 1;
    if (qtyAdd > 10) {
      return res.redirect('back');
    }

    const productPrice = await product.findOne({ _id: productId });
    const singleTotal = qtyAdd * productPrice.product_price;

    isproductInCart.quantity = qtyAdd;
    isproductInCart.single_product_total_price = singleTotal;

    const isTotal = userCart.total + productPrice.product_price;
    userCart.total = isTotal;
    userCart.totalQuantity += 1;

    await userCart.save();
    return res.redirect('back');
  } catch (error) {
    console.error('Error adding product quantity:', error);
    return res.status(500).send(error);
  }
};










//////////////////////////////////////////

///////////////////////////////////////             //////////////////////////// ///////////////


//////////////////////////////////////////////////////////////////////////////////////////




        //  if (sortContent === 'price-low-to-high') {
//   console.log("low-high");
//   isProductListFilter = await product.find({ product_category: categoryName }).sort({ product_price: 1 });
//     console.log("product filter",isProductListFilter);
// } else if (sortContent === 'price-high-to-low') {
//   console.log("high-low");
//   isProductListFilter = await product.find({ product_category: categoryName }).sort({ product_price: -1 });
//   console.log("product filter",isProductListFilter);
// } else {
//   console.log("relevance");
//   isProductListFilter = await product.find({ product_category: categoryName });
// }





///////////////////////////////////////
/////////////////////
///////////
///////
///
//
/


<!-- <form action="/adminOrderManagement/<%= item.orderNumber%>" method="post">



